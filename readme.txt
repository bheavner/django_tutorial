https://docs.djangoproject.com/en/4.0/intro/overview/
https://docs.djangoproject.com/en/4.0/intro/tutorial01/

notes:
tutorial 2 - set up database, first model, admin site
remember the three-step guide to making model changes:

    Change your models (in models.py).
    Run python manage.py makemigrations to create migrations for those changes
    Run python manage.py migrate to apply those changes to the database.

demo superuser - admin/gee5Wiz

-------------

tutorial 3 - adding views
https://docs.djangoproject.com/en/4.0/intro/tutorial03/
views are the public interface
Each view is represented by a Python function (or method, in the case of class-based views).
A URLconf maps URL patterns to views. (can see URL dispatcher FMI)

Each view is responsible for doing one of two things: returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404.

use Django’s template system to separate the design from Python by creating a template that the view can use.

Your project’s TEMPLATES setting describes how Django will load and render templates. The default settings file configures a DjangoTemplates backend whose APP_DIRS option is set to True. By convention DjangoTemplates looks for a “templates” subdirectory in each of the INSTALLED_APPS.

your template should be at polls/templates/polls/index.html. Because of how the app_directories template loader works as described above, you can refer to this template within Django as polls/index.html.

note: templates should use complete HTML documents (see https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#anatomy_of_an_html_document )

------------

tutorial 4: form processing and generic views
https://docs.djangoproject.com/en/4.0/intro/tutorial04/
request.POST values are always strings

suggest using generic views to have less code redundancy.
a common case of basic web development: getting data from the database according to a parameter passed in the URL, loading a template and returning the rendered template. Because this is so common, Django provides a shortcut, called the “generic views” system.

Generic views abstract common patterns to the point where you don’t even need to write Python code to write an app

to convert to generic views, I'll need to:
1) convert URLconf
2) delete uneeded views (likely detail(), results(), and index()
3) introduce new views based on generic views.

We’re using two generic views here: ListView and DetailView. Respectively, those two views abstract the concepts of “display a list of objects” and “display a detail page for a particular type of object.”

------------

tutorial 5: testing
https://docs.djangoproject.com/en/4.0/intro/tutorial05/
test with: python manage.py test <APP>
testing applications makes sense - tests in <APP>/tests.py

testing a view:
Django provides a test Client to simulate user interactions (can do in shell or tests.py)

-----------

tutorial 6: static pages
https://docs.djangoproject.com/en/4.0/intro/tutorial06/

with <APP>/static/<APP>/style.css directory structure, can refer to the static file in django as <APP>/style.css (like templates)

note: The {% static %} template tag is not available for use in static files which aren’t generated by Django, like your stylesheet. You should always use relative paths to link your static files between each other,

-----------

tutorial 7: customizing the admin site
https://docs.djangoproject.com/en/4.0/intro/tutorial07/

-----------
advanced tutorial: making app into a reusable package
https://docs.djangoproject.com/en/4.0/intro/reusable-apps/

could just drop polls directory to a new Django project and reuse it, but
to publish it, we need to package the app

We'll use setuptools, and follow the instructions for making a package. 
It works - neat!

-------------
what next?
https://docs.djangoproject.com/en/4.0/intro/whatsnext/

know enough to start a project and start working on it, so do that!
documentation:
intro - https://docs.djangoproject.com/en/4.0/intro/
topic guides - https://docs.djangoproject.com/en/4.0/topics/
howtos - https://docs.djangoproject.com/en/4.0/howto/
refs for specific functions - https://docs.djangoproject.com/en/4.0/ref/

note: can build documentation locally with sphinx (instructions at above link)
